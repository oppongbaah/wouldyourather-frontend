{"version":3,"sources":["helpers/global.js","Components/QuestionDetails.js"],"names":["cookies","Cookies","getImageURL","users","userId","filter","user","_id","imageURL","map","getUsername","username","getUserId","uid","toString","get","trim","connect","state","payload","data","authedUser","name","polls","voteStatus","vote","status","votedQuestion","dispatch","dispatch_fetchPoll","fetchPoll","dispatch_vote","pid","option","withRouter","props","useEffect","useState","btnAClass","setBtnAClass","btnBClass","setBtnBClass","btnFlag","setBtnFlag","tagA","setTagA","tagB","setTagB","question","handleOptAClick","history","location","push","listen","action","handleOptBClick","a","prevPath","pathname","console","log","viewQuestion","optionOne","optionTwo","className","disabled","onClick","bind","text","view","author","image","src","alt","to","desc","redirected","questionPath","directPath","err"],"mappings":"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","file":"static/js/10.5594a33b.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nconst getImageURL = (users, userId) => {\n    return users\n    .filter(user => user._id === userId && !!user.imageURL)\n    .map(user => user.imageURL)\n}\n\nconst getUsername = (users, userId) => {\n    return users\n    .filter(user => user._id === userId && !!user.username)\n    .map(user => user.username) \n}\n\nconst getUserId = (users, userId) => {\n    const uid = users \n    .filter(user => user._id === userId)\n    .map(user => user._id)\n\n    return uid.toString() === cookies.get('authedUser').trim()\n     ? 'you' : uid\n}\n\nexport {\n    getImageURL, \n    getUsername,\n    getUserId\n}\n\n","import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {withRouter, Redirect} from 'react-router-dom';\nimport {getImageURL, getUserId} from '../helpers/global';\nimport {vote, fetchPoll} from '../redux/middlewares/mwPolls';\nimport Cookies from 'universal-cookie';\nimport '../styles/dashboard.css';\nimport {MdDone} from 'react-icons/md';\n\nconst cookies = new Cookies();\n\nconst QuestionDetails = (props) => {\n\n  /* eslint-disable */\n  useEffect(() => {\n    props.dispatch_fetchPoll();\n  }, [props.voteStatus])\n  /* eslint-enable */\n\n  const [btnAClass, setBtnAClass] = useState(\"\");\n  const [btnBClass, setBtnBClass] = useState(\"\");\n  const [btnFlag, setBtnFlag] = useState(false);\n  const [tagA, setTagA] = useState(\"A\");\n  const [tagB, setTagB] = useState(\"B\");\n\n  let question = null, users = null; \n\n  try {\n    const handleOptAClick = (option) => {\n      users = props.history.location.users\n      question = props.history.location.state.question\n\n      props.dispatch_vote(question._id, props.authedUser, option);\n\n      setBtnAClass(\"selected\");\n      setBtnFlag(true);\n      setTagA(<MdDone/>)\n\n      props.history.push(`/questions/${question._id}/answered`, {\n        question,\n        users\n      });\n    }\n\n    props.history.listen((location, action) => {\n      if (action === \"POP\") {\n        props.history.push('/');\n      }\n    })\n    \n    const handleOptBClick = async (option) => {\n      try {\n        users = props.history.location.state.users\n        question = props.history.location.state.question\n\n        await props.dispatch_vote(question._id, props.authedUser, option);\n  \n        setBtnBClass(\"selected\");\n        setBtnFlag(true);\n        setTagB(<MdDone/>);\n        \n        props.history.push(`/questions/${question._id}/answered`, {\n          question,\n          users,\n          prevPath: props.history.location.pathname\n        });\n      }\n      catch (err) {console.log(err);}\n    }\n\n    const returnRedirect = () => {\n\n      return (\n        <Redirect to={{\n          pathname: '/users/login',\n          state: {desc: \"sign in required\", redirected: true, \n            questionPath: props.history.location.pathname}\n        }} />\n      )\n    }\n\n    const viewQuestion = (optionOne,optionTwo) => {\n\n      return (\n        <div className=\"question\">\n          <h2> Would You Rather? </h2>\n          <div className=\"option-btn\">\n              <div> <p> {tagA} </p> </div>\n              <button className={`btn btn-primary active ${btnAClass}`} \n                disabled={btnFlag}\n                onClick={handleOptAClick.bind(this, \"optionOne\")} >\n                {optionOne.text}\n              </button>\n          </div>\n          <div className=\"option-btn\">\n              <div> <p> {tagB} </p> </div>\n              <button className={`btn btn-primary active ${btnBClass}`}\n                disabled={btnFlag}\n                onClick={handleOptBClick.bind(this, \"optionTwo\")} >\n                {optionTwo.text}\n              </button>\n          </div>\n        </div>\n      )\n    }\n\n    const view = () => {\n      users = props.history.location.state.users\n      question = props.history.location.state.question\n\n      const {author,optionOne,optionTwo} = question;\n\n      let image = getImageURL(users, author);\n      image = image[0] ? image : 'avatar.png';\n\n\n      return (\n        <>\n        <div className=\"poll\">\n            <div className=\"avatar\">\n                <img src={`/usersAvatar/${image}`} alt=\"profile\" />\n            </div>\n            <div className=\"poll-info\">\n                <div className=\"asked-by\">\n                    <span> asked by @{getUserId(props.users, author)} </span>\n                </div>\n                {viewQuestion(optionOne,optionTwo)}\n            </div>\n        </div>\n        </>\n      )\n    }\n\n    return(\n      <>\n        {\n          cookies.get(\"authedUser\") &&\n            props.history.action === \"PUSH\" && props.history.location.state ?\n              view()\n            :\n            props.history.action === \"POP\" && props.history.location.state ?\n              view()\n            :\n              returnRedirect()\n        }\n        {\n          !cookies.get(\"authedUser\") &&\n              <Redirect to={{\n                  pathname: '/users/login',\n                  state: {desc: \"sign in required\", redirected: true,\n                  directPath: props.history.location.pathname}\n              }} />\n        }\n      </>\n    )\n  }\n  catch(err){\n    console.log(err);\n    return <Redirect to=\"/page-not-found-return-home\" />\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.users.payload.data,\n        authedUser: state.users.authedUser.name,\n        polls: state.polls.payload.data,\n        voteStatus: state.polls.vote.status,\n        votedQuestion: state.polls.vote.data\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      dispatch_fetchPoll: () => dispatch(fetchPoll()),\n      dispatch_vote: (pid, uid, option) => dispatch(vote(pid, uid, option))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(QuestionDetails));"],"sourceRoot":""}