{"version":3,"sources":["Components/Leaderboard.js"],"names":["cookies","Cookies","connect","state","users","payload","data","userStatus","status","dispatch","dispatch_fetchUsers","fetchUsers","withRouter","props","useEffect","override","css","sortUsers","orginalUsers","map","user","sort","x","y","questions","length","answers","preview","className","indexOf","src","imageURL","alt","username","_id","get","history","action","location","to","pathname","desc","redirected","prevPath","color","loading","size","prevState"],"mappings":"uLAQMA,EAAU,IAAIC,IA0GLC,uBAbS,SAACC,GACvB,MAAO,CACLC,MAAOD,EAAMC,MAAMC,QAAQC,KAC3BC,WAAYJ,EAAMC,MAAMC,QAAQG,WAIT,SAACC,GAC1B,MAAO,CACLC,oBAAqB,kBAAMD,EAASE,mBAIzBT,CAA6CU,aAxGxC,SAACC,GAGnBC,qBAAU,WACRD,EAAMH,wBACL,IAGH,IAAMN,EAAQS,EAAMT,MAEdW,EAAWC,YAAH,+FAORC,EAAY,SAACC,GAKjB,OAJoBA,EAAaC,KAAI,SAAAC,GAAI,OAAIA,KAAMC,MAAK,SAACC,EAAGC,GAAJ,OACnDD,EAAEE,UAAUC,OAASH,EAAEI,QAAQD,OAC/BF,EAAEC,UAAUC,OAASF,EAAEG,QAAQD,OAChC,GAAK,MAILE,EAAU,WACd,OACEV,EAAUb,GAAOe,KAAI,SAAAC,GAAI,OACvB,6BACE,sBAAKQ,UAAU,OAAf,UACE,mCAAMX,EAAUb,GAAOyB,QAAQT,GAAM,EAArC,OACA,qBAAKQ,UAAU,SAAf,SACE,qBAAKE,IAAG,uBAAkBV,EAAKW,SAASX,EAAKW,SAAS,cACtDC,IAAI,cAEN,sBAAKJ,UAAU,YAAf,UACE,8BACE,qCAAQR,EAAKa,SAAb,SAEF,4CAAQb,EAAKI,UAAUC,OAAvB,2BACA,4CAAQL,EAAKM,QAAQD,OAArB,qCAZGL,EAAKc,SAyCpB,OACE,qCAEIlC,EAAQmC,IAAI,eACW,SAArBtB,EAAMN,WAtBV,6BAE+B,SAAzBM,EAAMuB,QAAQC,QAAqBxB,EAAMuB,QAAQE,SAASnC,OAGjC,QAAzBU,EAAMuB,QAAQC,QAAoBxB,EAAMuB,QAAQE,SAASnC,MAFvDwB,IAKF,cAAC,IAAD,CAAUY,GAAI,CACZC,SAAU,eACVrC,MAAO,CAACsC,KAAM,mBAAoBC,YAAY,EAC9CC,SAAU9B,EAAMuB,QAAQE,SAASE,eAerC,cAAC,YAAD,CAAWI,MAAO,SAAUC,SAAS,EAAM7B,IAAKD,EAAU+B,KAAM,MAGjE9C,EAAQmC,IAAI,eACX,cAAC,IAAD,CAAUI,GAAI,CACZC,SAAU,eACVrC,MAAO,CAACsC,KAAM,mBAAoBC,YAAY,EAC9CK,UAAWlC,EAAMuB,QAAQE,SAASE","file":"static/js/15.767b5975.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect, withRouter} from 'react-router-dom';\nimport Cookies from 'universal-cookie';\nimport {fetchUsers} from '../redux/middlewares/mwUsers';\nimport { css } from \"@emotion/react\";\nimport {DotLoader} from \"react-spinners\";\n\nconst cookies = new Cookies();\n\nconst Leaderboard = (props) => {\n\n  /* eslint-disable */\n  useEffect(() => {\n    props.dispatch_fetchUsers();\n  }, [])\n  /* eslint-enable */\n\n  const users = props.users;\n\n  const override = css`\n  display: block;\n  margin: 20% auto;\n  border-color: tomato;\n  `;\n\n  // sort users based on the sum of the number of questions asked and answered\n  const sortUsers = (orginalUsers) => {\n    const sortedPolls = orginalUsers.map(user => user).sort((x, y) =>\n        (x.questions.length + x.answers.length) <\n        (y.questions.length + y.answers.length) ? \n        1 : -1);\n    return sortedPolls;\n  }  \n\n  const preview = () => {\n    return (\n      sortUsers(users).map(user => (\n        <li key={user._id}>\n          <div className=\"poll\">\n            <h4> {sortUsers(users).indexOf(user)+1} </h4>\n            <div className=\"avatar\">\n              <img src={`/usersAvatar/${user.imageURL?user.imageURL:'avatar.png'}`}\n              alt=\"profile\" />\n            </div>\n            <div className=\"poll-info\">\n              <div>\n                <span> {user.username} </span>\n              </div>\n              <p> {`${user.questions.length} questions asked`} </p>\n              <p> {`${user.answers.length} questions answered`} </p>\n            </div>\n          </div>\n        </li>\n      ))\n    )\n  }\n\n  const view = () => {\n\n    return (\n      <ol>\n        {\n            props.history.action === \"PUSH\" && props.history.location.state ?\n              preview()\n            :\n            props.history.action === \"POP\" && props.history.location.state ?\n              preview()\n            :\n            <Redirect to={{\n              pathname: '/users/login',\n              state: {desc: \"sign in required\", redirected: true, \n              prevPath: props.history.location.pathname}\n            }} />\n        }\n      </ol>\n    )\n  }\n\n  return(\n    <>\n      {\n        cookies.get(\"authedUser\") &&\n          props.userStatus === \"done\" \n          ?\n            view()\n          :\n          <DotLoader color={\"tomato\"} loading={true} css={override} size={60} />\n      }\n      {\n        !cookies.get(\"authedUser\") &&\n          <Redirect to={{\n            pathname: '/users/login',\n            state: {desc: \"sign in required\", redirected: true, \n            prevState: props.history.location.pathname}\n          }} />\n      }\n    </>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    users: state.users.payload.data,\n    userStatus: state.users.payload.status\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    dispatch_fetchUsers: () => dispatch(fetchUsers())\n  }\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Leaderboard));\n"],"sourceRoot":""}